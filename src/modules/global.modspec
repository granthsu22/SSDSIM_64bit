
# DiskSim Storage Subsystem Simulation Environment (Version 4.0)
# Revision Authors: John Bucy, Greg Ganger
# Contributors: John Griffin, Jiri Schindler, Steve Schlosser
#
# Copyright (c) of Carnegie Mellon University, 2001-2008.
#
# This software is being provided by the copyright holders under the
# following license. By obtaining, using and/or copying this software,
# you agree that you have read, understood, and will comply with the
# following terms and conditions:
#
# Permission to reproduce, use, and prepare derivative works of this
# software is granted provided the copyright and "No Warranty" statements
# are included with all reproductions and derivative works and associated
# documentation. This software may also be redistributed without charge
# provided that the copyright and "No Warranty" statements are included
# in all redistributions.
#
# NO WARRANTY. THIS SOFTWARE IS FURNISHED ON AN "AS IS" BASIS.
# CARNEGIE MELLON UNIVERSITY MAKES NO WARRANTIES OF ANY KIND, EITHER
# EXPRESSED OR IMPLIED AS TO THE MATTER INCLUDING, BUT NOT LIMITED
# TO: WARRANTY OF FITNESS FOR PURPOSE OR MERCHANTABILITY, EXCLUSIVITY
# OF RESULTS OR RESULTS OBTAINED FROM USE OF THIS SOFTWARE. CARNEGIE
# MELLON UNIVERSITY DOES NOT MAKE ANY WARRANTY OF ANY KIND WITH RESPECT
# TO FREEDOM FROM PATENT, TRADEMARK, OR COPYRIGHT INFRINGEMENT.
# COPYRIGHT HOLDERS WILL BEAR NO LIABILITY FOR ANY USE OF THIS SOFTWARE
# OR DOCUMENTATION.




MODULE global
HEADER \#include "../disksim_global.h"
HEADER \#include <libddbg/libddbg.h>
RESTYPE int
PROTO int disksim_global_loadparams(struct lp_block *b);

PARAM Init Seed				I	0 
INIT disksim->seedval = i;
INIT DISKSIM_srand48(disksim->seedval);
# INIT fprintf (outputfile, "Init Seed: PID (%d)\n", disksim->seedval);

This specifies the initial seed for the random number generator.
The initial seed value is applied at the very beginning of the 
simulation and is used during the initialization phase (e.g.,~for 
determining initial rotational positions).  Explicitly specifying the 
random generator seed enables experiment repeatability.

PARAM Init Seed with time		I	0 
TEST RANGE(i,0,1)
INIT if(i) { disksim->seedval = DISKSIM_time(); }
If a nonzero value is provided, DiskSim will use the current system 
time to initialize the ``Init Seed'' parameter.

PARAM Real Seed				I	0 
INIT disksim->seedval = i;

The `real' seed value is applied after the initialization phase
and is used during the simulation phase (e.g.,~for synthetic 
workload generation).  This allows multiple synthetic workloads 
(with different simulation seeds) to be run on equivalent 
configurations (i.e.,~with identical initial seeds, 
as specified above).


PARAM Real Seed with time		I	0 
TEST RANGE(i,0,1)
INIT disksim->seedval = DISKSIM_time();
If a nonzero value is provided, DiskSim will use the current system 
time to initialize the ``Real Seed'' parameter.


# in milliseconds
PARAM Statistic warm-up time		D	0 
TEST (d >= 0)
INIT disksim->warmup_event = (timer_event *) getfromextraq(); 
INIT disksim->warmup_event->type = TIMER_EXPIRED; 
INIT disksim->warmup_event->time = d * (double) 1000.0; 
INIT disksim->warmup_event->func = &disksim->timerfunc_disksim;
This specifies the amount of simulated time after which the statistics
will be reset.

PARAM Statistic warm-up IOs		I	0
TEST (i >= 0)
INIT disksim->warmup_iocnt = i;
This specifies the number of I/Os after which the statistics will be reset.

PARAM Stat definition file		S	1 
INIT char *path = lp_search_path(lp_cwd, s);
INIT if(!path) {
INIT   ddbg_assert2(0, "Couldn't find statdefs file in path");
INIT }
INIT else {
INIT   statdeffile = fopen(path, "r");
INIT   ddbg_assert2(statdeffile != 0, "failed to open statdefs file!");
INIT }

This specifies the name of the input file containing the
specifications for the statistical distributions to collect.  This
file allows the user to control the number and sizes of histogram bins
into which data are collected.  This file is mandatory.
Section~\ref{output.statdefs} describes its use.

PARAM Output file for trace of I/O requests simulated		S	0
TEST (outios = fopen(s, "w")) != NULL
INIT strcpy(disksim->outiosfilename, s);

This specifies the name of the output file to contain a trace of disk
request arrivals (in the default ASCII trace format described in
Section~\ref{input.traces}).  This allows instances of synthetically
generated workloads to be saved and analyzed after the simulation
completes.  This is particularly useful for analyzing (potentially
pathological) workloads produced by a system-level model.


PARAM Detailed execution trace		S	0
TEST (disksim->exectrace = fopen(s, "w")) != NULL
INIT disksim->exectrace_fn = strdup(s);

This specifies the name of the output file to contain a detailed trace
of system execution -- req issue/completion, etc.

PARAM Fairness scheduler	I	1
TEST (i >= 0)
INIT disksim->fairness_scheduler = i;

This specifies the type of scheduler policy: NOOP(0), CFQ(1), FIOS(2), ORACLE(3), WENDY(4) // add by wendy

PARAM Use pid trace	I	1
TEST (i >= 0)
INIT disksim->use_pid_trace = i;

This specifies whether we use traces with pid. USE(1), NOT_USE(0). // add by wendy

PARAM Chosen pid	I	1
TEST (i >= 0)
INIT disksim->chosen_pid = i;

This specifies what the only process can run to present slowdown. Set -1 to let all processes run at the same time. // add by wendy

PARAM Timeslice	D	1
TEST (d >= 0.0)
INIT disksim->timeslice = d;

This specifies what the total timeslice is. // add by wendy

PARAM Read timeslice	D	1
TEST (d >= 0.0)
INIT disksim->read_timeslice = d;

This specifies what the read timeslice reduction is. // add by wendy

PARAM Write timeslice	D	1
TEST (d >= 0.0)
INIT disksim->write_timeslice = d;

This specifies what the write timeslice reduction is. // add by wendy

PARAM Curr over next	I	1
TEST (i >= 0)
INIT disksim->curr_over_next = i;

This specifies whether we use curr_over_next policy. USE(1), NOT_USE(0). // add by wendy

PARAM Read over write	I	1
TEST (i >= 0)
INIT disksim->read_over_write = i;

This specifies whether SSD adopts read over write policy. USE(1), NOT_USE(0). // add by wendy

PARAM Host over gc	I	1
TEST (i >= 0)
INIT disksim->host_over_gc = i;

This specifies whether SSD adopts background GC. USE(1), NOT_USE(0). // add by wendy

PARAM NCQ command size bound	I	1
TEST (i >= 0)
INIT disksim->ncq_command_size_bound = i;

This specifies how many request can be in SSD queue. // add by wendy

PARAM Dispatch threshold	I	1
TEST (i >= 0)
INIT disksim->dispatch_threshold = i;

This specifies the light loading dies threshold. // add by wendy

PARAM Internal scheduler	I	1
TEST (i >= 0)
INIT disksim->internal_scheduler = i;

This specifies whether SSD adopts internal scheduler or not. // add by wendy

PARAM Write deadline	D	1
TEST (d >= 0)
INIT disksim->write_deadline = d;

This specifies the write deadline in wendy scheduler. // add by wendy

PARAM IO write deadline scheduler	I	1
TEST (i >= 0)
INIT disksim->io_write_deadline_scheduler = i;

This specifies whether I/O scheduler adopts I/O scheduler write deadline scheduler. // add by wendy


PARAM Internal write deadline scheduler	I	1
TEST (i >= 0)
INIT disksim->internal_write_deadline_scheduler = i;

This specifies whether SSD internal scheduler adopts internal write deadline scheduler. // add by wendy

PARAM Write starve	I	1
TEST (i >= 0)
INIT disksim->write_starve = i;

This specifies how much read that write can starve during read over write. // add by wendy

PARAM IO write starve	I	1
TEST (i >= 0)
INIT disksim->io_write_starve = i;

This specifies whether we apply write starve policy in the I/O scheduler. // add by wendy

PARAM Internal write starve	I	1
TEST (i >= 0)
INIT disksim->internal_write_starve = i;

This specifies whether we apply write starve policy in the SSD internal scheduler. // add by wendy

PARAM Chosen type	I	1
TEST(i >= 0)
INIT disksim->chosen_type = i;

This specifies which type runs in ssdsim. -1: all, 0: only write, 1: only read // add by wendy
